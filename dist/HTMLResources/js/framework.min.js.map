{"version":3,"sources":["base.js","quiz-app.js","controllers/list.js","controllers/quiz.js","controllers/results.js","factories/dataservice.js","factories/quizMetrics.js"],"names":[],"mappingsplCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"framework.min.js","sourcesContent":["(function($) {\n    'use strict';\n    $ = $ || jQuery;\n  \n    $(function() {\n        //Put your code here\n        /*var body = $('body'),\n            html = $('html'),\n            $doc = $(document);*/\n\n            /*handlexxxxxxxxxx = function () {\n              \n            };*/\n\n\n        //$navCloseDropdown.on('click', handlexxxxxxxxxx);\n\n        // Only run this stuff if page is fully loaded\n        // This is needed to prevent onreadystatechange being run twice\n        var ready = false;\n\n        document.onreadystatechange = function() {\n\n          if (ready) {\n            return;\n          }\n          \n          //Put your code here\n\n        };\n    });\n})(jQuery);","(function() {\n\n\t'use strict';\n\n\tangular\n\t\t.module('quizFramework', ['ngMaterial']);\n\n})();","(function() {\n\n\t'use strict';\n\t\n\tfunction ListController(quizMetrics, dataService) {\n\t\t// VM = Virtual model\n\t\tvar vm = this;\n\n\t\tfunction activateQuiz(){\n\t\t\tquizMetrics.changeState('quiz', true);\n\t\t}\n\n\t\t//GIVE ACCESS TO QUIZMETRICS IN LIST CONTROLLER & BIND TO VM\n\t\tvm.quizMetrics = quizMetrics;\n\t\t//\n\t\tvm.data = dataService.JSONQuizData;\n\t\t//\n\t\tvm.activateQuiz = activateQuiz;\n\t}\n\n\tangular\n\t\t.module('quizFramework')\n\t\t.controller('listCtrl', ListController);\n\n\tListController.$inject = ['quizMetrics', 'dataService'];\n\n})();","(function() {\n\n\t'use strict';\n\n\tfunction QuizController(quizMetrics, dataService) {\n\t\t// VM = Virtual model\n\t\tvar vm = this;\n\t\t\n\t\tvar numQuestionsAnswered = 0;\n\n\t\t//if the back button is clicked determine if we can go back and hide the button accordingly\n\t\tfunction backQuestion(){\n\t\t\t//if the previous question hasn't been answered - prevents click on progress showing unwanted back link\n\t\t\tif(vm.activeQuestion < 1){\n\t\t\t\tvm.back = false;\n\t\t\t\tvm.feedback = false;\n\t\t\t} else {\n\t\t\t\t//if we click the progress bar and the previous question hasn't been answered and the answer screen is not in view\n\t\t\t\tif(dataService.JSONQuizData[vm.activeQuestion].selected === null && vm.feedback ===false){\n\t\t\t\t\tvm.activeQuestion--;\n\t\t\t\t\tvm.feedback = false;\n\t\t\t\t} else {\n\t\t\t\t\t\t//First question so hide the back button\n\t\t\t\t\t\tif(vm.activeQuestion < 1){\n\t\t\t\t\t\t\tvm.back = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t//go back to the question screen\n\t\t\t\t\t\t\t\tif(vm.feedback === true){\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvm.feedback = false;\n\t\t\t\t\t\t\t\t\tvm.activeQuestion--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//go back to the answer screen\n\t\t\t\t\t\t\t\telse {\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvm.feedback = true;\n\t\t\t\t\t\t\t\t\tvm.activeQuestion--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//if this function is running then not all questions have been answered so go to the next unanswered question\n\t\tfunction setActiveQuestion(index){\n\t\t\tvm.feedback = false;\n\n\t\t\tif(index === undefined){\n\t\t\t\tvar breakOut = false;\n\t\t\t\t//Take one off the length to match number of questions, array starts at 0\n\t\t\t\tvar quizLength = dataService.JSONQuizData.length - 1;\n\n\t\t\t\twhile(!breakOut){\n\t\t\t\t\t//If active question is less than the length of the quiz then increment active question\n\t\t\t\t\tvm.activeQuestion = vm.activeQuestion < quizLength?++vm.activeQuestion:0;\n\n\t\t\t\t\t//Error if not all questions answered\n\t\t\t\t\tif(vm.activeQuestion === 0){\n\t\t\t\t\t\tvm.error = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t//If the active question hasn't yet been answered then we have found the next unanswered question\n\t\t\t\t\tif(dataService.JSONQuizData[vm.activeQuestion].selected === null){\n\t\t\t\t\t\tbreakOut = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvm.activeQuestion = index;\n\t\t\t}\n\n\t\t}\n\n\t\t//if user has clicked submit answer\n\t\tfunction questionAnswered(){\n\t\t\tvm.feedback = true;\n\t\t\tvm.back = true;\n\t\t}\n\n\t\t//if user has clicked continue in the answer feedback screen\n\t\tfunction questionContinue(){\n\n\t\t\tvm.feedback = false;\n\n\t\t\tvar quizLength = dataService.JSONQuizData.length;\n\n\t\t\t//If the current question has been answered increment the number of total questions\n\t\t\tif(dataService.JSONQuizData[vm.activeQuestion].selected !== null){\n\t\t\t\tnumQuestionsAnswered++;\n\t\t\t\tif(numQuestionsAnswered >= quizLength){\n\t\t\t\t\t//finish quiz\n\t\t\t\t\tfor(var i = 0; i < quizLength; i++){\n\t\t\t\t\t\tif(dataService.JSONQuizData[i].selected === null){\n\t\t\t\t\t\t\tsetActiveQuestion(i);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvm.error = false;\n\t\t\t\t\tvm.finalise = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t//If we are on the last question swap the next question button to a find out score button\n\t\t\t\tif(numQuestionsAnswered === quizLength - 1){\n\t\t\t\t\tvm.lastQuestion = true;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvm.setActiveQuestion();\n\t\t}\n\n\t\t//Set the selected answer to the index of the question\n\t\tfunction selectAnswer(index){\n\t\t\tdataService.JSONQuizData[vm.activeQuestion].selected = index;\n\t\t}\n\n\t\t//Reset everything\n\t\tfunction finaliseAnswers(){\n\t\t\tvm.finalise = false;\n\t\t\tvm.back = false;\n\t\t\tvm.lastQuestion = false;\n\t\t\tnumQuestionsAnswered = 0;\n\t\t\tvm.activeQuestion = 0;\n\t\t\tquizMetrics.markQuiz();\n\t\t\tquizMetrics.changeState('quiz', false);\n\t\t\t//trigger the results page\n\t\t\tquizMetrics.changeState('results', true);\n\t\t}\n\n\t\t//GIVE ACCESS TO QUIZMETRICS IN QUIZ CONTROLLER & BIND TO VM\n\t\tvm.quizMetrics = quizMetrics;\n\t\t//Get access to dataService object in our view\n\t\tvm.dataService = dataService;\n\t\t//Named function syntax\n\t\tvm.questionAnswered = questionAnswered;\n\t\t//Show the feedback for the question\n\t\tvm.questionContinue = questionContinue;\n\t\t//Set the active question\n\t\tvm.setActiveQuestion = setActiveQuestion;\n\t\t//Go back a question\n\t\tvm.backQuestion = backQuestion;\n\t\t//Set the selected question\n\t\tvm.selectAnswer = selectAnswer;\n\t\t//Finalise answers\n\t\tvm.finaliseAnswers = finaliseAnswers;\n\t\t//Set the starting question\n\t\tvm.activeQuestion = 0;\n\t\t//Basic error handling if not all questions have been answered\n\t\tvm.error = false;\n\t\t//Displays a prompt to check if user wants to go to the results page\n\t\tvm.finalise = false;\n\t\t//Displays the feedback to the answer\n\t\tvm.feedback = false;\n\t\t//Switch the button in the last answer screen\n\t\tvm.lastQuestion = false;\n\t\t//Back link after first question answered\n\t\tvm.back = false;\n\n\t}\n\n\tangular\n\t\t.module('quizFramework')\n\t\t.controller('quizCtrl', QuizController);\n\n\tQuizController.$inject = ['quizMetrics', 'dataService'];\n\n})();","(function() {\n\n\t'use strict';\n\n\tfunction ResultsController(quizMetrics, dataService) {\n\n\t\t// VM = Virtual model\n\t\tvar vm = this;\n\n\t\t//Show score feedback tagline\n\t\tfunction calculateScoreTagline(){\n\t\t\t//Loop through all questions in JSON and match score to description\n\t\t\tfor(var i = 0; i < dataService.JSONScoreDescription.length; i++){\n\t\t\t\tvar score = quizMetrics.numCorrect,\n\t\t\t\t\t\tmatchedScore = dataService.JSONScoreDescription[i].score;\n\n\t\t\t\tif(score === matchedScore){\n\t\t\t\t\t//do something\n\t\t\t\t\treturn dataService.JSONScoreDescription[i].tagline;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Show score feedback description\n\t\tfunction calculateScoreDescription(){\n\t\t\t//Loop through all questions in JSON and match score to description\n\t\t\tfor(var i = 0; i < dataService.JSONScoreDescription.length; i++){\n\t\t\t\tvar score = quizMetrics.numCorrect,\n\t\t\t\t\t\tmatchedScore = dataService.JSONScoreDescription[i].score;\n\n\t\t\t\tif(score === matchedScore){\n\t\t\t\t\t//do something\n\t\t\t\t\treturn dataService.JSONScoreDescription[i].description;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Show score percentage\n\t\tfunction calculatePerc(){\n\t\t\treturn quizMetrics.numCorrect / dataService.JSONQuizData.length * 100;\n\t\t}\n\n\t\t//Show question of clicked legend link\n\t\tfunction setActiveQuestion(index){\n\t\t\tvm.activeQuestion = index;\n\t\t}\n\n\t\t//Set the class of the answer - corrrect or incorrect\n\t\tfunction getAnswerClass(index){\n\t\t\t//if index is the same as the correct answers index return class to display\n\t\t\tif(index === dataService.JSONCorrectAnswers[vm.activeQuestion].number){\n\t\t\t\t//if correct\n\t\t\t\treturn 'bg-success';\n\t\t\t} else if(index === dataService.JSONQuizData[vm.activeQuestion].selected){\n\t\t\t\t//if incorrect\n\t\t\t\treturn 'bg-danger';\n\t\t\t}\n\t\t}\n\n\t\tfunction reset(){\n\t\t\tquizMetrics.changeState('results', false);\n\t\t\t//Reset the number of question corrects as we are startin again.\n\t\t\tquizMetrics.numCorrect = 0;\n\n\t\t\t//Loop through all questions in JSON and reset all flags back to default\n\t\t\tfor(var i = 0; i < dataService.JSONQuizData.length; i++){\n\t\t\t\tvar data = dataService.JSONQuizData[i];\n\n\t\t\t\tdata.selected = null;\n\t\t\t\tdata.correct = null;\n\t\t\t}\n\t\t}\n\n\t\tvm.quizMetrics = quizMetrics;\n\t\tvm.dataService = dataService;\n\t\tvm.getAnswerClass = getAnswerClass;\n\t\tvm.reset = reset;\n\t\tvm.setActiveQuestion = setActiveQuestion;\n\t\tvm.calculatePerc = calculatePerc;\n\t\tvm.calculateScoreTagline = calculateScoreTagline;\n\t\tvm.calculateScoreDescription = calculateScoreDescription;\n\t\tvm.activeQuestion = 0;\n\n\t}\n\n\tangular\n\t\t.module('quizFramework')\n\t\t.controller('resultsCtrl', ResultsController);\n\n\tResultsController.$inject = ['quizMetrics', 'dataService'];\n\n})();","(function() {\n\n\t'use strict';\n\n\tfunction DataFactory($http) {\n\n\t\t/*var urlBase = 'http://www.json-generator.com/api/json/get/bQkWdPSKMi?indent=2';*/\n\t\tvar urlBase = 'HTMLResources/json/quiz-data.json?callback=JSON_CALLBACK';\n\n\t\tvar JSONQuizData = [];\n\t\tvar JSONCorrectAnswers = [];\n\t\tvar JSONScoreDescription = [];\n\n\t\tvar dataObj = {\n\t\t\tJSONQuizData: JSONQuizData,\n\t\t\tJSONCorrectAnswers: JSONCorrectAnswers,\n\t\t\tJSONScoreDescription: JSONScoreDescription\n\t\t};\n\n    $http.get(urlBase).success(function(data) {\n        dataObj.JSONQuizData = data.JSONQuizData,\n        dataObj.JSONCorrectAnswers = data.JSONCorrectAnswers,\n        dataObj.JSONScoreDescription = data.JSONScoreDescription;\n    });\n\n  \treturn dataObj;\n\t}\n\n\tangular\n\t\t.module('quizFramework')\n\t\t.factory('dataService', DataFactory);\n\n\tDataFactory.$inject = ['$http'];\n\t\t\n})();","(function() {\n\n\t'use strict';\n\n\tfunction QuizMetrics(dataService) {\n\t\t\n\t\tfunction changeState(metric, state){\n\t\t\tif(metric === 'quiz'){\n\t\t\t\tquizObj.quizActive = state;\n\t\t\t} else if(metric === 'results') {\n\t\t\t\tquizObj.resultsActive = state;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\t\t\n\t\t}\n\n\t\t//Mark the answers\n\t\tfunction markQuiz(){\n\t\t\tquizObj.JSONCorrectAnswers = dataService.JSONCorrectAnswers;\n\t\t\t//Loop through questions and check answer given by the user\n\t\t\tfor(var i = 0; i < dataService.JSONQuizData.length; i++){\n\t\t\t\tif(dataService.JSONQuizData[i].selected === dataService.JSONCorrectAnswers[i].number){\n\t\t\t\t\t//set correct flag on answer\t\t\t\t\t\t\n\t\t\t\t\tdataService.JSONQuizData[i].correct = true;\n\t\t\t\t\tquizObj.numCorrect++;\n\t\t\t\t} else {\n\t\t\t\t\t//set incorrect flag on answer\n\t\t\t\t\tdataService.JSONQuizData[i].correct = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar quizObj = {\n\t\t\tquizActive: false,\n\t\t\tresultsActive: false,\n\t\t\tchangeState: changeState,\n\t\t\tJSONCorrectAnswers: [],\n\t\t\tmarkQuiz: markQuiz,\n\t\t\tnumCorrect: 0\n\t\t};\n\n\t\treturn quizObj;\n\n\t}\n\n\tangular\n\t\t.module('quizFramework')\n\t\t.factory('quizMetrics', QuizMetrics);\n\n\tQuizMetrics.$inject = ['dataService'];\n\t\t\n})();"],"sourceRoot":"/source/"}