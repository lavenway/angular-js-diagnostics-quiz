{"version":3,"sources":["base.js","quiz-app.js","controllers/list.js","controllers/quiz.js","controllers/results.js","factories/dataservice.js","factories/quizMetrics.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxzjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"framework.min.js","sourcesContent":["(function($) {\n    'use strict';\n    $ = $ || jQuery;\n  \n    $(function() {\n        //Put your code here\n        /*var body = $('body'),\n            html = $('html'),\n            $doc = $(document);*/\n\n            /*handlexxxxxxxxxx = function () {\n              \n            };*/\n\n\n        //$navCloseDropdown.on('click', handlexxxxxxxxxx);\n\n        // Only run this stuff if page is fully loaded\n        // This is needed to prevent onreadystatechange being run twice\n        var ready = false;\n\n        document.onreadystatechange = function() {\n\n          if (ready) {\n            return;\n          }\n          \n          //Put your code here\n\n        };\n    });\n})(jQuery);","(function() {\n\t'use strict';\n\tangular\n\t\t.module('quizFramework', []);\n})();","(function() {\n\n\t'use strict';\n\tangular\n\t\t.module('quizFramework')\n\t\t.controller('listCtrl', ListController);\n\n\t\tListController.$inject = ['quizMetrics', 'dataService'];\n\n\t\tfunction ListController(quizMetrics, dataService) {\n\t\t\t// VM = Virtual model\n\t\t\tvar vm = this;\n\t\t\t//GIVE ACCESS TO QUIZMETRICS IN LIST CONTROLLER & BIND TO VM\n\t\t\tvm.quizMetrics = quizMetrics;\n\t\t\t//\n\t\t\tvm.data = dataService.JSONQuizData;\n\t\t\t//\n\t\t\tvm.activateQuiz = activateQuiz;\n\n\t\t\tfunction activateQuiz(){\n\t\t\t\tquizMetrics.changeState('quiz', true);\n\t\t\t}\n\t\t}\n\n})();","(function() {\n\n\t'use strict';\n\tangular\n\t\t.module('quizFramework')\n\t\t.controller('quizCtrl', QuizController);\n\n\t\tQuizController.$inject = ['quizMetrics', 'dataService'];\n\n\t\tfunction QuizController(quizMetrics, dataService) {\n\t\t\t// VM = Virtual model\n\t\t\tvar vm = this;\n\t\t\t//GIVE ACCESS TO QUIZMETRICS IN QUIZ CONTROLLER & BIND TO VM\n\t\t\tvm.quizMetrics = quizMetrics;\n\t\t\t//Get access to dataService object in our view\n\t\t\tvm.dataService = dataService;\n\t\t\t//Named function syntax\n\t\t\tvm.questionAnswered = questionAnswered;\n\t\t\t//Set the active question\n\t\t\tvm.setActiveQuestion = setActiveQuestion;\n\t\t\t//Set the selected question\n\t\t\tvm.selectAnswer = selectAnswer;\n\t\t\t//Finalise answers\n\t\t\tvm.finaliseAnswers = finaliseAnswers;\n\t\t\t//Set the starting question\n\t\t\tvm.activeQuestion = 0;\n\t\t\t//Basic error handling if not all questions have been answered\n\t\t\tvm.error = false;\n\t\t\t//Displays a prompt to check if user wants to go to the results page\n\t\t\tvm.finalise = false;\n\n\t\t\tvar numQuestionsAnswered = 0;\n\n\t\t\t//if this function is running then not all questions have been answered so go to the next unanswered question\n\t\t\tfunction setActiveQuestion(index){\n\t\t\t\tif(index === undefined){\n\t\t\t\t\tvar breakOut = false;\n\t\t\t\t\t//Take one off the length to match number of questions, array starts at 0\n\t\t\t\t\tvar quizLength = dataService.JSONQuizData.length - 1;\n\n\t\t\t\t\twhile(!breakOut){\n\t\t\t\t\t\t//If active question is less than the length of the quiz then increment active question\n\t\t\t\t\t\tvm.activeQuestion = vm.activeQuestion < quizLength?++vm.activeQuestion:0;\n\n\t\t\t\t\t\t//Error if not all questions answered\n\t\t\t\t\t\tif(vm.activeQuestion === 0){\n\t\t\t\t\t\t\tvm.error = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//If the active question hasn't yet been answered then we have found the next unanswered question\n\t\t\t\t\t\tif(dataService.JSONQuizData[vm.activeQuestion].selected === null){\n\t\t\t\t\t\t\tbreakOut = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvm.activeQuestion = index;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//if user has clicked continue\n\t\t\tfunction questionAnswered(){\n\n\t\t\t\tvar quizLength = dataService.JSONQuizData.length;\n\n\t\t\t\t//If the current question has been answered increment the number of total questions\n\t\t\t\tif(dataService.JSONQuizData[vm.activeQuestion].selected !== null){\n\t\t\t\t\tnumQuestionsAnswered++;\n\n\t\t\t\t\tif(numQuestionsAnswered >= quizLength){\n\t\t\t\t\t\t//finish quiz\n\t\t\t\t\t\tfor(var i = 0; i < quizLength; i++){\n\t\t\t\t\t\t\tif(dataService.JSONQuizData[i].selected === null){\n\t\t\t\t\t\t\t\tsetActiveQuestion(i);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvm.error = false;\n\t\t\t\t\t\tvm.finalise = true;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvm.setActiveQuestion();\n\n\t\t\t}\n\n\t\t\t//Set the selected answer to the index of the question\n\t\t\tfunction selectAnswer(index){\n\t\t\t\tdataService.JSONQuizData[vm.activeQuestion].selected = index;\n\t\t\t}\n\n\t\t\t//Reset everything\n\t\t\tfunction finaliseAnswers(){\n\t\t\t\tvm.finalise = false;\n\t\t\t\tnumQuestionsAnswered = 0;\n\t\t\t\tvm.activeQuestion = 0;\n\t\t\t\tquizMetrics.markQuiz();\n\t\t\t\tquizMetrics.changeState('quiz', false);\n\t\t\t\t//trigger the results page\n\t\t\t\tquizMetrics.changeState('results', true);\n\t\t\t}\n\n\t\t}\n\n})();","(function() {\n\n\t'use strict';\n\tangular\n\t\t.module('quizFramework')\n\t\t.controller('resultsCtrl', ResultsController);\n\n\t\tResultsController.$inject = ['quizMetrics', 'dataService'];\n\n\t\tfunction ResultsController(quizMetrics, dataService) {\n\t\t\t// VM = Virtual model\n\t\t\tvar vm = this;\n\t\t\t\n\t\t\tvm.quizMetrics = quizMetrics;\n\t\t\tvm.dataService = dataService;\n\t\t\tvm.getAnswerClass = getAnswerClass;\n\t\t\tvm.reset = reset;\n\t\t\tvm.setActiveQuestion = setActiveQuestion;\n\t\t\tvm.calculatePerc = calculatePerc;\n\t\t\tvm.activeQuestion = 0;\n\n\t\t\t//Show score percentage\n\t\t\tfunction calculatePerc(){\n\t\t\t\treturn quizMetrics.numCorrect / dataService.JSONQuizData.length * 100;\n\t\t\t}\n\n\t\t\t//Show question of clicked legend link\n\t\t\tfunction setActiveQuestion(index){\n\t\t\t\tvm.activeQuestion = index;\n\t\t\t}\n\n\t\t\t//Set the class of the answer - corrrect or incorrect\n\t\t\tfunction getAnswerClass(index){\n\t\t\t\t//if index is the same as the correct answers index return class to display\n\t\t\t\tif(index === quizMetrics.correctAnswers[vm.activeQuestion]){\n\t\t\t\t\t//if correct\n\t\t\t\t\treturn 'bg-success';\n\t\t\t\t} else if(index === dataService.JSONQuizData[vm.activeQuestion].selected){\n\t\t\t\t\t//if incorrect\n\t\t\t\t\treturn 'bg-danger';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction reset(){\n\t\t\t\tquizMetrics.changeState('results', false);\n\t\t\t\t//Reset the number of question corrects as we are startin again.\n\t\t\t\tquizMetrics.numCorrect = 0;\n\n\t\t\t\t//Loop through all questions in JSON and reset all flags back to default\n\t\t\t\tfor(var i = 0; i < dataService.JSONQuizData.length; i++){\n\t\t\t\t\tvar data = dataService.JSONQuizData[i];\n\n\t\t\t\t\tdata.selected = null;\n\t\t\t\t\tdata.correct = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n})();","(function() {\n\n\t'use strict';\n\tangular\n\t\t.module('quizFramework')\n\t\t.factory('dataService', DataFactory);\n\n\t\tfunction DataFactory() {\n\t\t\tvar dataObj = {\n\t\t\t\tJSONQuizData: JSONQuizData,\n\t\t\t\tcorrectAnswers: correctAnswers\n\t\t\t};\n\n\t\t\treturn dataObj;\n\t\t}\n\n\t\tvar correctAnswers = [1, 2, 3, 0, 2, 0, 3];\n\n\t\tvar JSONQuizData = [\n\t\t\t{\n\t\t\t\ttype: 'text', //Could be text or image in this quiz\n\t\t\t\ttext: 'This is question 1?',\n\t\t\t\tpossibilities: [\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer A'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer B'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer C'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer D'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tselected: null,\n\t\t\t\tcorrect: null\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: 'This is question 2?',\n\t\t\t\tpossibilities: [\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer A'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer B'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer C'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer D'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tselected: null,\n\t\t\t\tcorrect: null\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: 'This is question 3?',\n\t\t\t\tpossibilities: [\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer A'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer B'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer C'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer D'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tselected: null,\n\t\t\t\tcorrect: null\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: 'This is question 4?',\n\t\t\t\tpossibilities: [\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer A'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer B'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer C'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer D'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tselected: null,\n\t\t\t\tcorrect: null\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: 'This is question 5?',\n\t\t\t\tpossibilities: [\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer A'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer B'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer C'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer D'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tselected: null,\n\t\t\t\tcorrect: null\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: 'This is question 6?',\n\t\t\t\tpossibilities: [\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer A'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer B'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer C'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer D'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tselected: null,\n\t\t\t\tcorrect: null\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'image',\n\t\t\t\ttext: 'This is question 7?',\n\t\t\t\tpossibilities: [\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer A'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer B'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer C'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer: 'This is option answer D'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tselected: null,\n\t\t\t\tcorrect: null\n\t\t\t}\n\t\t];\n\t\t\n})();","(function() {\n\n\t'use strict';\n\tangular\n\t\t.module('quizFramework')\n\t\t.factory('quizMetrics', QuizMetrics);\n\n\t\tQuizMetrics.$inject = ['dataService'];\n\n\t\tfunction QuizMetrics(dataService) {\n\t\t\tvar quizObj = {\n\t\t\t\tquizActive: false,\n\t\t\t\tresultsActive: false,\n\t\t\t\tchangeState: changeState,\n\t\t\t\tcorrectAnswers: [],\n\t\t\t\tmarkQuiz: markQuiz,\n\t\t\t\tnumCorrect: 0\n\t\t\t};\n\n\t\t\treturn quizObj;\n\n\t\t\tfunction changeState(metric, state){\n\t\t\t\tif(metric === 'quiz'){\n\t\t\t\t\tquizObj.quizActive = state;\n\t\t\t\t} else if(metric === 'results') {\n\t\t\t\t\tquizObj.resultsActive = state;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\t\t\n\t\t\t}\n\n\t\t\t//Mark the answers\n\t\t\tfunction markQuiz(){\n\t\t\t\tquizObj.correctAnswers = dataService.correctAnswers;\n\t\t\t\t//Loop through questions and check answer given by the user\n\t\t\t\tfor(var i = 0; i < dataService.JSONQuizData.length; i++){\n\t\t\t\t\tif(dataService.JSONQuizData[i].selected === dataService.correctAnswers[i]){\n\t\t\t\t\t\t//set correct flag on answer\t\t\t\t\t\t\n\t\t\t\t\t\tdataService.JSONQuizData[i].correct = true;\n\t\t\t\t\t\tquizObj.numCorrect++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//set incorrect flag on answer\n\t\t\t\t\t\tdataService.JSONQuizData[i].correct = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\t\n})();"],"sourceRoot":"/source/"}