(function($) {
    'use strict';
    $ = $ || jQuery;
  
    $(function() {
        //Put your code here
        /*var body = $('body'),
            html = $('html'),
            $doc = $(document);*/

            /*handlexxxxxxxxxx = function () {
              
            };*/


        //$navCloseDropdown.on('click', handlexxxxxxxxxx);

        // Only run this stuff if page is fully loaded
        // This is needed to prevent onreadystatechange being run twice
        var ready = false;

        document.onreadystatechange = function() {

          if (ready) {
            return;
          }
          
          //Put your code here

        };
    });
})(jQuery);
(function() {
	'use strict';
	angular
		.module('quizFramework', []);
})();
(function() {

	'use strict';
	angular
		.module('quizFramework')
		.controller('listCtrl', ListController);

		ListController.$inject = ['quizMetrics', 'dataService'];

		function ListController(quizMetrics, dataService) {
			// VM = Virtual model
			var vm = this;
			//GIVE ACCESS TO QUIZMETRICS IN LIST CONTROLLER & BIND TO VM
			vm.quizMetrics = quizMetrics;
			//
			vm.data = dataService.JSONQuizData;
			//
			vm.activateQuiz = activateQuiz;

			function activateQuiz(){
				quizMetrics.changeState('quiz', true);
			}
		}

})();
(function() {

	'use strict';
	angular
		.module('quizFramework')
		.controller('quizCtrl', QuizController);

		QuizController.$inject = ['quizMetrics', 'dataService'];

		function QuizController(quizMetrics, dataService) {
			// VM = Virtual model
			var vm = this;
			//GIVE ACCESS TO QUIZMETRICS IN QUIZ CONTROLLER & BIND TO VM
			vm.quizMetrics = quizMetrics;
			//Get access to dataService object in our view
			vm.dataService = dataService;
			//Named function syntax
			vm.questionAnswered = questionAnswered;
			//Set the active question
			vm.setActiveQuestion = setActiveQuestion;
			//Set the selected question
			vm.selectAnswer = selectAnswer;
			//Finalise answers
			vm.finaliseAnswers = finaliseAnswers;
			//Set the starting question
			vm.activeQuestion = 0;
			//Basic error handling if not all questions have been answered
			vm.error = false;
			//Displays a prompt to check if user wants to go to the results page
			vm.finalise = false;

			var numQuestionsAnswered = 0;

			//if this function is running then not all questions have been answered so go to the next unanswered question
			function setActiveQuestion(index){
				if(index === undefined){
					var breakOut = false;
					//Take one off the length to match number of questions, array starts at 0
					var quizLength = dataService.JSONQuizData.length - 1;

					while(!breakOut){
						//If active question is less than the length of the quiz then increment active question
						vm.activeQuestion = vm.activeQuestion < quizLength?++vm.activeQuestion:0;

						//Error if not all questions answered
						if(vm.activeQuestion === 0){
							vm.error = true;
						}

						//If the active question hasn't yet been answered then we have found the next unanswered question
						if(dataService.JSONQuizData[vm.activeQuestion].selected === null){
							breakOut = true;
						}
					}
				} else {
					vm.activeQuestion = index;
				}
			}

			//if user has clicked continue
			function questionAnswered(){

				var quizLength = dataService.JSONQuizData.length;

				//If the current question has been answered increment the number of total questions
				if(dataService.JSONQuizData[vm.activeQuestion].selected !== null){
					numQuestionsAnswered++;

					if(numQuestionsAnswered >= quizLength){
						//finish quiz
						for(var i = 0; i < quizLength; i++){
							if(dataService.JSONQuizData[i].selected === null){
								setActiveQuestion(i);
								return;
							}
						}
						vm.error = false;
						vm.finalise = true;
						return;
					}

				}

				vm.setActiveQuestion();

			}

			//Set the selected answer to the index of the question
			function selectAnswer(index){
				dataService.JSONQuizData[vm.activeQuestion].selected = index;
			}

			//Reset everything
			function finaliseAnswers(){
				vm.finalise = false;
				numQuestionsAnswered = 0;
				vm.activeQuestion = 0;
				quizMetrics.markQuiz();
				quizMetrics.changeState('quiz', false);
				//trigger the results page
				quizMetrics.changeState('results', true);
			}

		}

})();
(function() {

	'use strict';
	angular
		.module('quizFramework')
		.controller('resultsCtrl', ResultsController);

		ResultsController.$inject = ['quizMetrics', 'dataService'];

		function ResultsController(quizMetrics, dataService) {
			// VM = Virtual model
			var vm = this;
			
			vm.quizMetrics = quizMetrics;
			vm.dataService = dataService;
			vm.getAnswerClass = getAnswerClass;
			vm.reset = reset;
			vm.setActiveQuestion = setActiveQuestion;
			vm.calculatePerc = calculatePerc;
			vm.activeQuestion = 0;

			//Show score percentage
			function calculatePerc(){
				return quizMetrics.numCorrect / dataService.JSONQuizData.length * 100;
			}

			//Show question of clicked legend link
			function setActiveQuestion(index){
				vm.activeQuestion = index;
			}

			//Set the class of the answer - corrrect or incorrect
			function getAnswerClass(index){
				//if index is the same as the correct answers index return class to display
				if(index === quizMetrics.correctAnswers[vm.activeQuestion]){
					//if correct
					return 'bg-success';
				} else if(index === dataService.JSONQuizData[vm.activeQuestion].selected){
					//if incorrect
					return 'bg-danger';
				}
			}

			function reset(){
				quizMetrics.changeState('results', false);
				//Reset the number of question corrects as we are startin again.
				quizMetrics.numCorrect = 0;

				//Loop through all questions in JSON and reset all flags back to default
				for(var i = 0; i < dataService.JSONQuizData.length; i++){
					var data = dataService.JSONQuizData[i];

					data.selected = null;
					data.correct = null;
				}
			}

		}

})();
(function() {

	'use strict';
	angular
		.module('quizFramework')
		.factory('dataService', DataFactory);

		function DataFactory() {
			var dataObj = {
				JSONQuizData: JSONQuizData,
				correctAnswers: correctAnswers
			};

			return dataObj;
		}

		var correctAnswers = [1, 2, 3, 0, 2, 0, 3];

		var JSONQuizData = [
			{
				type: 'text', //Could be text or image in this quiz
				text: 'This is question 1?',
				possibilities: [
					{
						answer: 'This is option answer A'
					},
					{
						answer: 'This is option answer B'
					},
					{
						answer: 'This is option answer C'
					},
					{
						answer: 'This is option answer D'
					}
				],
				selected: null,
				correct: null
			},
			{
				type: 'text',
				text: 'This is question 2?',
				possibilities: [
					{
						answer: 'This is option answer A'
					},
					{
						answer: 'This is option answer B'
					},
					{
						answer: 'This is option answer C'
					},
					{
						answer: 'This is option answer D'
					}
				],
				selected: null,
				correct: null
			},
			{
				type: 'text',
				text: 'This is question 3?',
				possibilities: [
					{
						answer: 'This is option answer A'
					},
					{
						answer: 'This is option answer B'
					},
					{
						answer: 'This is option answer C'
					},
					{
						answer: 'This is option answer D'
					}
				],
				selected: null,
				correct: null
			},
			{
				type: 'text',
				text: 'This is question 4?',
				possibilities: [
					{
						answer: 'This is option answer A'
					},
					{
						answer: 'This is option answer B'
					},
					{
						answer: 'This is option answer C'
					},
					{
						answer: 'This is option answer D'
					}
				],
				selected: null,
				correct: null
			},
			{
				type: 'text',
				text: 'This is question 5?',
				possibilities: [
					{
						answer: 'This is option answer A'
					},
					{
						answer: 'This is option answer B'
					},
					{
						answer: 'This is option answer C'
					},
					{
						answer: 'This is option answer D'
					}
				],
				selected: null,
				correct: null
			},
			{
				type: 'text',
				text: 'This is question 6?',
				possibilities: [
					{
						answer: 'This is option answer A'
					},
					{
						answer: 'This is option answer B'
					},
					{
						answer: 'This is option answer C'
					},
					{
						answer: 'This is option answer D'
					}
				],
				selected: null,
				correct: null
			},
			{
				type: 'image',
				text: 'This is question 7?',
				possibilities: [
					{
						answer: 'This is option answer A'
					},
					{
						answer: 'This is option answer B'
					},
					{
						answer: 'This is option answer C'
					},
					{
						answer: 'This is option answer D'
					}
				],
				selected: null,
				correct: null
			}
		];
		
})();
(function() {

	'use strict';
	angular
		.module('quizFramework')
		.factory('quizMetrics', QuizMetrics);

		QuizMetrics.$inject = ['dataService'];

		function QuizMetrics(dataService) {
			var quizObj = {
				quizActive: false,
				resultsActive: false,
				changeState: changeState,
				correctAnswers: [],
				markQuiz: markQuiz,
				numCorrect: 0
			};

			return quizObj;

			function changeState(metric, state){
				if(metric === 'quiz'){
					quizObj.quizActive = state;
				} else if(metric === 'results') {
					quizObj.resultsActive = state;
				} else {
					return false;
				}		
			}

			//Mark the answers
			function markQuiz(){
				quizObj.correctAnswers = dataService.correctAnswers;
				//Loop through questions and check answer given by the user
				for(var i = 0; i < dataService.JSONQuizData.length; i++){
					if(dataService.JSONQuizData[i].selected === dataService.correctAnswers[i]){
						//set correct flag on answer						
						dataService.JSONQuizData[i].correct = true;
						quizObj.numCorrect++;
					} else {
						//set incorrect flag on answer
						dataService.JSONQuizData[i].correct = false;
					}
				}
			}

		}
		
})();
//# sourceMappingURL=framework.min.js.map
